# Binary search

def binary_search(arr, target):
    low = 0
    high = len(arr) - 1

    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1

    return -1

Quick sort

def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    
    pivot = arr[0]
    lesser = quick_sort([x for x in arr[1:] if x < pivot])
    greater = quick_sort([x for x in arr[1:] if x >= pivot])
    
    return lesser + [pivot] + greater

# This implementation of a Stack data structure is good for storing and managing data in a Last In, First Out. This can be useful in situations where you need to keep track of items in a specific order, such as undo operations in a text editor, tracking function calls in a program, or managing the call stack in a computer program.
